<?php

declare(strict_types=1);

namespace Api\Http\Controllers;

use Api\Application\{{modelName}}\Delete{{modelName}}\Delete{{modelName}};
use Api\Application\{{modelName}}\Get{{modelName}}List\Get{{modelName}}List;
use Api\Application\{{modelName}}\Register{{modelName}}\Register{{modelName}};
use Api\Application\{{modelName}}\Update{{modelName}}\Update{{modelName}};
use Api\Domain\{{modelName}}\{{modelName}};
use Api\Http\Requests\{{modelName}}\{{modelName}}Request;
use Api\Http\Resources\{{modelName}}\{{modelName}}Resource;
use Api\Http\Resources\{{modelName}}\{{modelName}}ResourceCollection;
use Api\Domain\{{modelName}}\{{modelName}}Filter;
use App\Domain\Core\Order;
use App\Domain\Core\Pagination;
use App\Http\Requests\Request;

/**
 * Class {{modelName}}Controller
 * @package Api\Http\Controllers
 */
class {{modelName}}Controller extends Controller
{
    /**
     * @param Request $request
     * @return JsonResponse
     */
    public function index(Request $request): JsonResponse
    {
        $filter = {{modelName}}Filter::fromRequest($request);
        $order = Order::fromRequest($request, {{modelName}}::ALLOWED_SORT_FIELDS);
        $pagination = Pagination::fromRequest($request);

        ${{modelNamePluralLowerCase}} = $this->dispatch(new Get{{modelName}}List($filter, $pagination, $order));

        return response()->json(new {{modelName}}ResourceCollection(${{modelNamePluralLowerCase}}), Response::HTTP_OK);
    }

    /**
     * @param {{modelName}}Request $request
     * @return JsonResponse
     */
    public function store({{modelName}}Request $request): JsonResponse
    {
        ${{modelNameSingularLowerCase}} = $this->dispatch(Register{{modelName}}::fromRequest($request));

        return response()->json(['data' => new {{modelName}}Resource(${{modelNameSingularLowerCase}})], Response::HTTP_CREATED);
    }

    /**
     * @param {{modelName}}Request $request
     * @param {{modelName}} ${{modelNameSingularLowerCase}}
     * @return JsonResponse
     */
    public function update({{modelName}}Request $request, {{modelName}} ${{modelNameSingularLowerCase}}): JsonResponse
    {
        ${{modelNameSingularLowerCase}} = $this->dispatch(Update{{modelName}}::fromRequest($request, ${{modelNameSingularLowerCase}}));

        return response()->json([
            'data' => new {{modelName}}Resource(${{modelNameSingularLowerCase}})
        ], Response::HTTP_OK);
    }

	/**
     * @param {{modelName}} ${{modelNameSingularLowerCase}}
     * @return JsonResponse
     */
    public function show({{modelName}} ${{modelNameSingularLowerCase}}): JsonResponse
    {
        return response()->json(['data' => new {{modelName}}Resource(${{modelNameSingularLowerCase}})]);
    }

    /**
     * @param {{modelName}} ${{modelNameSingularLowerCase}}
     * @return JsonResponse
     */
    public function destroy({{modelName}} ${{modelNameSingularLowerCase}}): JsonResponse
    {
        $this->dispatch(new Delete{{modelName}}(${{modelNameSingularLowerCase}}));

        return response()->json(null, Response::HTTP_NO_CONTENT);
    }
}
